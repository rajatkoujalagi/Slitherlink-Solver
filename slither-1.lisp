
(defun slither()
	(setf m 2)
	(setf n 2)
	(setf i 0)
	(setf j 0)
	(setf row 1 col 1 pos "T")
	(setf input "dummy")
	(setf brow (1- (* row 2)) bcol (1- (* col 2)))
	(setf board '(  ("+" " " "+" " " "+") (" " "3" " " "3" " ") ("+" " " "+" " " "+") (" " " " " " " " " ") ("+" " " "+" " " "+")    ))
	(setf board-state '(  (2 0 2 0 2) (0 3 0 3 0) (2 0 2 0 2) (0 0 0 0 0) (2 0 2 0 2)    ) )
	
	(setf size (+ (1+ n) n))
	(print "hey man")
	(print "Welcome to Slitherlink !")
	(print "Enter row column position to make a move")
	(print "Type 'check' to check for a solution")
	(print "Type 'reset' to reset the board configuration")
	(print "Type 'exit' to stop the game")
	(print-board board)
	(setf input (read-line))
	(while (equal nil (equal input "exit"))			
		
		(cond
			((equal input "reset")(print "heya") (print-board '(  ("+" " " "+" " " "+") (" " "3" " " "3" " ") ("+" " " "+" " " "+") (" " " " " " " " " ") ("+" " " "+" " " "+")    )))
			((equal input "check") (solution-check board-state) (print-board board))
			(t	(setf row (parse-integer (string (char input 0)) ))
				(setf col (parse-integer (string (char input 2)) ))
				(setf brow (1- (* row 2)) bcol (1- (* col 2)))
				(setf pos (string (char input 4)) )
				(play board)
			)
		)
		(setf input (read-line))
		
	)
)

(defun reset()
	;(load "slither.lisp")
	;(slither)
	(init)
	;(setf board '(  ("+" " " "+" " " "+") (" " "3" " " "3" " ") ("+" " " "+" " " "+") (" " " " " " " " " ") ("+" " " "+" " " "+")    )) 
	;(setf board-state '(  (2 0 2 0 2) (0 3 0 3 0) (2 0 2 0 2) (0 0 0 0 0) (2 0 2 0 2)    ) )
	;(gc)
)
(defun print-board(lst)
	(format t "~%")
	(dotimes (i size)
		(dotimes (j size)
			(format t (nth j (nth i lst)))
		)
		(format t "~%")
	)
)

(defun play(lst)
	(cond
		( (equal pos "T") (setf (nth bcol (nth (1- brow) lst)) "-") (modify-board board-state brow bcol) (modify-board board-state (1- brow) (1- bcol))
			(modify-board board-state (1- brow) (1+ bcol)) (when (>= (- brow 2) 1) (modify-board board-state (- brow 2) bcol))
		)
		( (equal pos "B") (setf (nth bcol (nth (1+ brow) lst)) "-") (modify-board board-state brow bcol) (modify-board board-state (1+ brow) (1- bcol))
			(modify-board board-state (1+ brow) (1+ bcol))  (when (<= (+ brow 2) (- size 2)) (modify-board board-state (+ brow 2) bcol))
		)
		( (equal pos "L") (setf (nth (1- bcol) (nth brow lst)) "|") (modify-board board-state brow bcol) (modify-board board-state (1+ brow) (1- bcol))
			(modify-board board-state (1- brow) (1- bcol))  (when (>= (- bcol 2) 1) (modify-board board-state brow (- bcol 2)))
		)
		( (equal pos "R") (setf (nth (1+ bcol) (nth brow lst)) "|") (modify-board board-state brow bcol) (modify-board board-state (1+ brow) (1+ bcol))
			(modify-board board-state (1- brow) (1+ bcol)) 	(when (<= (+ bcol 2) (- size 2)) (modify-board board-state brow (+ bcol 2)))	
		)
		(t (print "Invalid position"))
	)
	(print-board lst)
)

(defun modify-board(lst row col)
	(setf val (nth col (nth row lst)))
	(setf (nth col (nth row lst)) (1- val))
)

(defun solution-check(lst)
	(setf over 0)
	(dotimes (i size)
		(dotimes (j size)
			(setf val (nth j (nth i lst)))
			(when (> val 0)
				(when (equal nil (= val 2))
					(setf over 1)
				)
			)
		)
	)
	(cond
		((= over 0) (print "You found the Solution !! Well played !!") (print "Play again ?") (reset))
		(t (print "Nice try, but keep playing !"))
	)	
)
